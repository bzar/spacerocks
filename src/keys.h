#ifndef SPACEROCKS_KEYS_H
#define SPACEROCKS_KEYS_H

#include "GLFW/glfw3.h"
#include "ew/controlcontext.h"
#include <unordered_set>

enum KeyAction
{
  ACTION_LEFT = 0,
  ACTION_RIGHT,
  ACTION_FIRE,
  ACTION_ACCELERATE,
  ACTION_NEXT_WEAPON,
  ACTION_PREV_WEAPON,
  ACTION_START,
  ACTION_EXIT,
  ACTION_NEXT_LETTER,
  ACTION_PREV_LETTER,
  ACTION_ENTER_LETTER,
  ACTION_ERASE_LETTER,
  ACTION_PAUSE,
  ACTION_SHOW_INFO,
  ACTION_SHOW_OVERDRAW,
  ACTION_SKIP_LEVEL,

  NUM_KEY_ACTIONS
};

#ifdef PANDORA
std::unordered_set<int> const KEY_ACTION_MAPPING[NUM_KEY_ACTIONS] = {
  {GLFW_KEY_LEFT},
  {GLFW_KEY_RIGHT},
  {GLFW_KEY_HOME, GLFW_KEY_END},
  {GLFW_KEY_UP, GLFW_KEY_PAGE_UP, GLFW_KEY_PAGE_DOWN},
  {GLFW_KEY_RIGHT_CONTROL},
  {GLFW_KEY_RIGHT_SHIFT},
  {GLFW_KEY_LEFT_ALT},
  {GLFW_KEY_ESCAPE},
  {GLFW_KEY_UP},
  {GLFW_KEY_DOWN},
  {GLFW_KEY_RIGHT, GLFW_KEY_HOME, GLFW_KEY_END, GLFW_KEY_LEFT_ALT, GLFW_KEY_ENTER},
  {GLFW_KEY_BACKSPACE, GLFW_KEY_LEFT, GLFW_KEY_PAGE_UP, GLFW_KEY_PAGE_DOWN},
  {GLFW_KEY_LEFT_ALT, GLFW_KEY_P},
  {GLFW_KEY_I},
  {GLFW_KEY_O},
  {GLFW_KEY_N}
};
#else
std::unordered_set<int> const KEY_ACTION_MAPPING[NUM_KEY_ACTIONS] = {
  {GLFW_KEY_LEFT},
  {GLFW_KEY_RIGHT},
  {GLFW_KEY_SPACE},
  {GLFW_KEY_UP},
  {GLFW_KEY_X},
  {GLFW_KEY_Z},
  {GLFW_KEY_ENTER},
  {GLFW_KEY_ESCAPE},
  {GLFW_KEY_UP},
  {GLFW_KEY_DOWN},
  {GLFW_KEY_RIGHT, GLFW_KEY_SPACE, GLFW_KEY_ENTER},
  {GLFW_KEY_BACKSPACE, GLFW_KEY_LEFT},
  {GLFW_KEY_P},
  {GLFW_KEY_I},
  {GLFW_KEY_O},
  {GLFW_KEY_N}
};
#endif

bool actionKeyPush(KeyAction const action, ew::ControlContext* ctx);
bool actionKeyDown(KeyAction const action, ew::ControlContext* ctx);

#endif // KEYS_H
